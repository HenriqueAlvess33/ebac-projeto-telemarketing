# imports do app

import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from io import BytesIO

# Fun√ß√µes que comp√µem o app


# Fun√ß√£o para converter o df em uma planila excel
def df_to_excel(df):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine="xlsxwriter")
    df.to_excel(writer, index=False, sheet_name="Sheet1")
    writer.close()
    processed_data = output.getvalue()
    return processed_data


# Fun√ß√£o para ler os dados
@st.cache_data()
def load_data(file_data):
    return pd.read_csv(file_data, sep=";")


# Fun√ß√£o para a cria√ß√£o de seletores de vari√°veis categ√≥ricas
def selecao_valores_categoricos(relatorio, col, selecionados, verificacao):
    if verificacao == True:
        return relatorio
    else:
        return relatorio[relatorio[col].isin(selecionados)]


# Fun√ß√£o principal da aplica√ß√£o
def main():
    # Configura√ß√£o inicial da p√°gina da aplica√ß√£o
    st.set_page_config(
        page_title="Telemarketing analisys",
        page_icon="Atari-Logo.png",
        layout="wide",
        initial_sidebar_state="expanded",
    )


# Configura√ß√µes de exbi√ß√£o da p√°gina de streamlit
st.set_page_config(
    page_title="An√°lise de dados banc√°rios",
    page_icon="nerv.svg",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Apresenta a imagem na barra lateral da aplica√ß√£o
image = Image.open("Atari-Logo.png")
st.sidebar.image(image)


# Cabe√ßalho do app
st.markdown(
    """
    <link href="https://fonts.googleapis.com/css2?family=Tourney&display=swap" rel="stylesheet">
    <div style="
        font-family: 'Tourney', sans-serif; 
        color: #06F906; 
        font-size: 30px; 
        text-align: center; 
        border: 2px solid #06F906; 
        padding: 10px; 
        width: fit-content; 
        margin: auto;
        margin-bottom: 20px;
        border-radius: 10px;">
        Avalia√ß√£o comparativa dos dados brutos e filtrados
    </div>
    """,
    unsafe_allow_html=True,
)


# Selecionando tema escuro para as visualiza√ß√µes
sns.set_theme(style="dark")

# Se√ß√£o para upload de um banco de dados
st.sidebar.markdown("Fa√ßa o upload de um arquivo CSV ou xlsx:")
data_file = st.sidebar.file_uploader("Dataset para an√°lise", type=["csv", "xlsx"])

if data_file is not None:

    # Leitura do banco de dados
    dados_bancarios_raw = load_data(data_file)

    with st.sidebar.form(key="my_form"):

        # Definindo os valores m√≠nimos e m√°ximos para as idades
        min_age = int(dados_bancarios_raw["age"].min())
        max_age = int(dados_bancarios_raw["age"].max())

        # Formatando o seletor de idades para filtragem e cria√ß√£o de gr√°ficos
        idades = st.slider(
            label="Idades",
            min_value=min_age,
            max_value=max_age,
            value=(min_age, max_age),
            step=1,
            format="%d",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de profiss√µes
        # Adicionando um seletor de m√∫ltiplas profiss√µes para o usu√°rio
        jobs_list = dados_bancarios_raw["job"].unique().tolist()
        jobs_all = st.checkbox(
            "Selecionar todas as profiss√µes", value=True, key="checkbox_job"
        )
        jobs_selected = st.multiselect(
            "Profiss√µes",
            jobs_list,
            default=jobs_list if jobs_all else [],
            key="multiselect_job",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de estado civil
        # Adicionando um seletor de m√∫ltiplas estados civis
        marital_list = dados_bancarios_raw["marital"].unique().tolist()
        marital_all = st.checkbox(
            "Selecionar todos os estados civis", value=True, key="checkbox_marital"
        )
        marital_selected = st.multiselect(
            "Estado civil",
            marital_list,
            default=marital_list if marital_all else [],
            key="multiselect_marital",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de educa√ß√£o
        # Adicionando um seletor de m√∫ltiplas n√≠veis de educa√ß√£o
        education_list = dados_bancarios_raw["education"].unique().tolist()
        education_all = st.checkbox(
            "Selecionar todos os n√≠veis de educa√ß√£o",
            value=True,
            key="checkbox_education",
        )
        education_selected = st.multiselect(
            "Educa√ß√£o",
            education_list,
            default=education_list if education_all else [],
            key="multiselect_education",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de status de cr√©dito (DEFAULT)
        # Adicionando um seletor de m√∫ltiplos status de cr√©dito
        default_list = dados_bancarios_raw["default"].unique().tolist()
        default_all = st.checkbox(
            "Selecionar todos os status de cr√©dito", value=True, key="checkbox_default"
        )
        default_selected = st.multiselect(
            "Status de cr√©dito",
            default_list,
            default=default_list if default_all else [],
            key="multiselect_default",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de status de financiamento imobiliario (HOUSING)
        # Adicionando um seletor de m√∫ltiplos status de habita√ß√£o
        housing_list = dados_bancarios_raw["housing"].unique().tolist()
        housing_all = st.checkbox(
            "Selecionar todos os status de financiamento de im√≥vel",
            value=True,
            key="checkbox_housing",
        )
        housing_selected = st.multiselect(
            "Status de habita√ß√£o",
            housing_list,
            default=housing_list if housing_all else [],
            key="multiselect_housing",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de status de cr√©dito (LOAN)
        # Adicionando um seletor de m√∫ltiplos status de cr√©dito
        loan_list = dados_bancarios_raw["loan"].unique().tolist()
        loan_all = st.checkbox(
            "Selecionar todos os status de cr√©dito", value=True, key="checkbox_loan"
        )
        loan_selected = st.multiselect(
            "Status de cr√©dito",
            loan_list,
            default=loan_list if loan_all else [],
            key="multiselect_loan",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de contato (CONTACT)
        # Adicionando um seletor de m√∫ltiplos contatos
        contact_list = dados_bancarios_raw["contact"].unique().tolist()
        contact_all = st.checkbox(
            "Selecionar todos os contatos", value=True, key="checkbox_contact"
        )
        contact_selected = st.multiselect(
            "Contato",
            contact_list,
            default=contact_list if contact_all else [],
            key="multiselect_contact",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de m√™s de contato (MONTH)
        # Adicionando um seletor de m√∫ltiplos meses de contato
        month_list = dados_bancarios_raw["month"].unique().tolist()
        month_all = st.checkbox(
            "Selecionar todos os meses de contato", value=True, key="checkbox_month"
        )
        month_selected = st.multiselect(
            "M√™s de contato",
            month_list,
            default=month_list if month_all else [],
            key="multiselect_month",
        )

        st.markdown("---")

        # Cria√ß√£o de lista com todos os valores √∫nicos de dia de contato (DAY_OF_WEEK)
        # Adicionando um seletor de m√∫ltiplos dias de contato
        day_of_week_list = dados_bancarios_raw["day_of_week"].unique().tolist()
        days_of_week_all = st.checkbox(
            "Selecionar todos os dias de contato",
            value=True,
            key="checkbox_day_of_week",
        )
        day_of_week_selected = st.multiselect(
            "Dia de contato",
            day_of_week_list,
            default=day_of_week_list if days_of_week_all else [],
            key="multiselect_day_of_week",
        )

        st.markdown("---")

        graph_type = st.radio(
            "Tipo de gr√°fico", ("Barras", "Pizza"), index=0, horizontal=True
        )

        # Bot√£o de aplicar filtro
        submit_button = st.form_submit_button(label="Filtrar dados")

    dados_bancarios_filtrados = (
        dados_bancarios_raw.query("age>=@idades[0] and age <= @idades[1]")
        .pipe(selecao_valores_categoricos, "job", jobs_selected, jobs_all)
        .pipe(selecao_valores_categoricos, "marital", marital_selected, marital_all)
        .pipe(
            selecao_valores_categoricos, "education", education_selected, education_all
        )
        .pipe(selecao_valores_categoricos, "default", default_selected, default_all)
        .pipe(selecao_valores_categoricos, "housing", housing_selected, housing_all)
        .pipe(selecao_valores_categoricos, "loan", loan_selected, loan_all)
        .pipe(selecao_valores_categoricos, "contact", contact_selected, contact_all)
        .pipe(selecao_valores_categoricos, "month", month_selected, month_all)
        .pipe(
            selecao_valores_categoricos,
            "day_of_week",
            day_of_week_selected,
            days_of_week_all,
        )
    )

    # Atribuindo a convers√£o do dataframe filtrado para o formato excel a uma vari√°vel
    df_xlsx = df_to_excel(dados_bancarios_filtrados)

    # Bot√£o de download do dataframe filtrado em excel
    st.download_button(
        data=df_xlsx,
        label="üü¢‚¨áÔ∏è Fa√ßa o download do Dataframe filtrado em excel",
        file_name="dados filtrados.xlsx",
    )

    # Guardando informa√ß√£o do tamanho do dataset
    dimensao_dataset_raw = dados_bancarios_raw.shape

    # Guardando informa√ß√£o do tamanho do dataset filtrado
    dimensao_dataset_filtrado = dados_bancarios_filtrados.shape

    # Declarando para o usu√°rio do que se trata o dataset
    st.markdown(
        """
    <link href="https://fonts.googleapis.com/css2?family=Orbitron&display=swap" rel="stylesheet">
    <div style="
        font-family: 'Orbitron', sans-serif; 
        color: #FFFFFF; 
        font-size: 24px; /* Tamanho equivalente a ## do Markdown */
        text-align: right; 
        border: 2px solid #FFFFFF; 
        padding: 20px; 
        width: fit-content; 
        margin-left: auto; 
        margin-right: 0;
        margin-top: 20px;
        margin-bottom: 20px;
        border-radius: 10px;">
        Dados Banc√°rios sem altera√ß√µes
    </div>
    """,
        unsafe_allow_html=True,
    )

    # Exibindo o dataframe original e escrevendo suas dimens√µes
    st.markdown(
        f"**Tamanho do dataset:** {dimensao_dataset_raw[0]} linhas e {dimensao_dataset_raw[1]} colunas"
    )
    st.dataframe(
        dados_bancarios_raw.head(n=5).style.set_properties(
            **{"background-color": "#0a0f25", "color": "#f8f9fa"}
        )
    )

    # Exibindo o dataframe original e escrevendo suas dimens√µes
    st.markdown(
        f"**Tamanho do dataset:** {dimensao_dataset_raw[0]} linhas e {dimensao_dataset_raw[1]} colunas"
    )

    # Declarando para o usu√°rio do que se trata o dataset
    st.markdown(
        """
    <link href="https://fonts.googleapis.com/css2?family=Orbitron&display=swap" rel="stylesheet">
    <div style="
        font-family: 'Orbitron', sans-serif; 
        color: #FFFFFF; 
        font-size: 24px; /* Tamanho equivalente a ## do Markdown */
        text-align: right; 
        border: 2px solid #FFFFFF; 
        padding: 20px; 
        width: fit-content; 
        margin-left: auto; 
        margin-right: 0;
        margin-top: 20px;
        margin-bottom: 20px;
        border-radius: 10px;">
        Dados Banc√°rios Filtrados
    </div>
    """,
        unsafe_allow_html=True,
    )

    # Escrevendo as dimens√µes do dataframe filtrado
    st.markdown(
        f"**Tamanho do dataset:** {dimensao_dataset_filtrado[0]} linhas e {dimensao_dataset_filtrado[1]} colunas"
    )

    # Exibindo o dataframe filtrado
    st.dataframe(
        dados_bancarios_filtrados.head(n=5).style.set_properties(
            **{"background-color": "#0a0f25", "color": "#f8f9fa"}
        )
    )

    # Defini√ß√£o de propor√ß√£o percentual da vari√°vel target (y) para os dados brutos
    dados_bancarios_raw_percentual_target = (
        dados_bancarios_raw.y.value_counts(normalize=True).to_frame() * 100
    )
    dados_bancarios_raw_percentual_target = (
        dados_bancarios_raw_percentual_target.sort_index()
    )

    # Defini√ß√£o de propor√ß√£o percentual da vari√°vel target (y) para os dados filtrados
    try:
        dados_bancarios_filtrados_percentual_target = (
            dados_bancarios_filtrados.y.value_counts(normalize=True).to_frame() * 100
        )
        dados_bancarios_filtrados_percentual_target = (
            dados_bancarios_filtrados_percentual_target.sort_index()
        )
    except:
        st.error("Erro no filtro")

    # Cria√ß√£o de duas colunas para comportar as informa√ß√µes de propor√ß√£o dos dataframes
    col1, col2 = st.columns(2)

    # Exibi√ß√£o da propor√ß√£o percentual da vari√°vel target (y) para os dados brutos
    col1.write("### Propor√ß√£o original")
    col1.write(dados_bancarios_raw_percentual_target)

    # Exibi√ß√£o da propor√ß√£o percentual da vari√°vel target (y) para os dados filtrados
    col2.write("### Propor√ß√£o filtrada")
    col2.write(dados_bancarios_filtrados_percentual_target)

    # Cria√ß√£o de gr√°fico para compara√ß√£o entre os dados brutos e filtrados
    fig, ax = plt.subplots(1, 2, figsize=(6, 3))

    # Definindo o gr√°fico de acordo com a escolha do usu√°rio
    if graph_type == "Barras":

        # Gr√°fico de barras para os dados brutos
        sns.barplot(
            x=dados_bancarios_raw_percentual_target.index,
            y="proportion",
            data=dados_bancarios_raw_percentual_target,
            palette="rocket",
            ax=ax[0],
        )
        # Configura√ß√£o da visualiza√ß√£o do gr√°fico de barras
        ax[0].set_ylabel("Propor√ß√£o (%)")
        ax[0].set_xlabel("Dados Brutos")
        ax[0].bar_label(ax[0].containers[0])
        ax[0].set_ylim(0, 100)
        ax[0].set_title("Dados Brutos", fontweight="bold")
        fig.tight_layout()

        # Gr√°fico de barras para os dados filtrados
        sns.barplot(
            x=dados_bancarios_filtrados_percentual_target.index,
            y="proportion",
            data=dados_bancarios_filtrados_percentual_target,
            palette="rocket",
            ax=ax[1],
        )

        # Configura√ß√£o da visualiza√ß√£o do gr√°fico de barras
        ax[1].set_ylabel("Propor√ß√£o (%)")
        ax[1].bar_label(ax[1].containers[1])
        ax[1].set_ylim(0, 100)
        ax[1].set_xlabel("Dados Filtraodos")
        ax[1].set_title("Dados Filtrados", fontweight="bold")
        fig.tight_layout()  # Ajusta automaticamente os subplots para evitar sobreposi√ß√£o

        # Exibi√ß√£o do gr√°fico de barras
        st.pyplot(plt)

    # Se o usu√°rio escolher gr√°fico de pizza, o gr√°fico ser√° gerado com os dados filtrados
    else:
        # Gr√°fico de pizza para os dados brutos
        dados_bancarios_raw_percentual_target.plot.pie(
            y="proportion",
            ax=ax[0],
            autopct="%1.1f%%",
            startangle=90,
            legend=False,
            title="Dados brutos",
        )

        # Configura√ß√£o da visualiza√ß√£o do gr√°fico de pizza
        ax[0].set_ylabel("Propor√ß√£o (%)")
        ax[0].set_xlabel("Dados brutos")
        ax[0].set_title("Dados brutos", fontweight="bold")
        fig.tight_layout()

        # Gr√°fico de pizza para os dados filtrados
        dados_bancarios_filtrados_percentual_target.plot.pie(
            y="proportion",
            ax=ax[1],
            autopct="%1.1f%%",
            startangle=90,
            legend=False,
            title="Dados filtrados",
        )

        # Configura√ß√£o da visualiza√ß√£o do gr√°fico de pizza
        ax[1].set_ylabel("Propor√ß√£o (%)")
        ax[1].set_xlabel("Dados filtrados")
        ax[1].set_title("Dados filtrados", fontweight="bold")
        fig.tight_layout()

        # Exibi√ß√£o do gr√°fico de pizza
        st.pyplot(plt)
